// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract FuelToken is ERC20, Ownable {

    constructor() ERC20("FuelToken", "FTK") Ownable(msg.sender) {}

    function mint(address to, uint256 litres) external onlyOwner {
        require(litres > 0, "No tokens will be minted");
        _mint(to, litres);
        emit Minted(to, litres);
    }

    function burn(uint256 litres) external {
        require(litres > 0, "Provide a countable quantity to burn tokens");
        require(litres <= balanceOf(_msgSender()), "Entered value is more than minted tokens");
        _burn(_msgSender(), litres);
        emit Burned(_msgSender(), litres);
    }

    function transfer(address to, uint256 litres) public override returns (bool) {
        require(litres > 0, "Transfer a countable quantity of tokens");
        require(litres <= balanceOf(_msgSender()), "Not enough tokens to transfer");
        _transfer(_msgSender(), to, litres);
        emit Transferred(_msgSender(), to, litres);
        return true;
    }

    event Minted(address indexed to, uint256 litres);
    event Burned(address indexed from, uint256 litres);
    event Transferred(address indexed from, address indexed to, uint256 litres);
}
